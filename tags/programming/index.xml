<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Jeremy&#39;s Ramblings</title>
    <link>http://jeremyceri.se/tags/programming/</link>
    <description>Recent content in Programming on Jeremy&#39;s Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 27 Jul 2017 22:58:00 -0600</lastBuildDate>
    
	<atom:link href="http://jeremyceri.se/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RoguelikeDev Builds a Roguelike, Part 7</title>
      <link>http://jeremyceri.se/post/roguelike-dev-part-7/</link>
      <pubDate>Thu, 27 Jul 2017 22:58:00 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-part-7/</guid>
      <description>The time has finally come where our small game is going to become unmanageable when adding new features. Certainly, we could make it work (and in fact the official tutorial and revamped tutorial come up with some clever ways around this complexity), but I&amp;rsquo;m not a fan of headaches, or unmaintainable code. I&amp;rsquo;ve always wanted to write an entity component system setup from scratch, to better understand how they work, and and ECS can dramatically help us cut down on complexity of new features.</description>
    </item>
    
    <item>
      <title>RLDBAR Sidenote #2: Vim Keys and Diagonal Movement</title>
      <link>http://jeremyceri.se/post/sidenote-2-vim-keys/</link>
      <pubDate>Thu, 27 Jul 2017 22:10:20 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/sidenote-2-vim-keys/</guid>
      <description>In this second sidenote to the main RLDBAR tutorial, we&amp;rsquo;re going to make a very small, but very useful change: diagnonal movement, and allowing users to move via VIM keys. The first, diagonal movement, opens up many more tactical options over just being able to move in the cardinal directions (north, south, east, west), and will give the player more flexibility. Adding in support for VIM key movement (h, j, k, l, y, u, b, n) will give our game a bit more reach to users without full keyboards (not that we&amp;rsquo;ve implemented number pad support yet&amp;hellip; :P ).</description>
    </item>
    
    <item>
      <title>RoguelikeDev Builds a Roguelike, Part 6</title>
      <link>http://jeremyceri.se/post/roguelike-dev-week-3-part-2/</link>
      <pubDate>Sun, 23 Jul 2017 22:20:22 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-week-3-part-2/</guid>
      <description>Welcome back to my series about building a Roguelike in Go (and following along with RoguelikeDev&amp;rsquo;s dev-along)! Last time, we added a field of vision algorithm to our game, putting the player in the dark, except the immediate area surrounding them. In this installment, we&amp;rsquo;re going to start adding the framework for monsters that inhabit the dark corners of the caverns. In particular, our goal will be to randomly place Game Entities, representing things such as Goblins, Troll, and Orcs, around our generated caverns, make sure they get to take actions, and allow the player to interact with them.</description>
    </item>
    
    <item>
      <title>RoguelikeDev Builds a Roguelike, Part 5</title>
      <link>http://jeremyceri.se/post/roguelike-dev-week-3-part-1/</link>
      <pubDate>Thu, 13 Jul 2017 22:30:50 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-week-3-part-1/</guid>
      <description>Welcome to part 5 of RoguelikeDev builds a Roguelike! In this weeks installment, we&amp;rsquo;re going to be talking about field of vision (fov for short), and how we can apply that to our game in progress. Field of vision is how far the player can see. If something is beyond the field of vision of the player, it will not be visible. This adds a nice exploration element to our game, as the game map starts completely unexplored.</description>
    </item>
    
    <item>
      <title>RoguelikeDev Builds a Roguelike, Part 4</title>
      <link>http://jeremyceri.se/post/roguelike-dev-week-2/</link>
      <pubDate>Tue, 11 Jul 2017 13:41:06 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-week-2/</guid>
      <description>Welcome to Part 4 of RoguelikeDev builds a Roguelike! This week, we&amp;rsquo;re going to be fleshing out the map that the player will be playing the game on. If you recall, last time, we created an &amp;lsquo;arena&amp;rsquo; sort of map, with a large open space in the middle, surrounded by walls along the outside edges. Not very exciting, but it was something for the player to mover around in. This week, we&amp;rsquo;re going to procedurally generate some (hopefully) realistic looking caverns that the player can explore.</description>
    </item>
    
    <item>
      <title>RLDBAR Sidenote #1: Cameras</title>
      <link>http://jeremyceri.se/post/sidenote-1-cameras/</link>
      <pubDate>Wed, 05 Jul 2017 22:14:21 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/sidenote-1-cameras/</guid>
      <description>This is the first of what I anticipate to be several sidenotes to the main RoguelikeDev Builds a Roguelike shenanigans. These sidenotes will deal with things that are not covered in the main tutorial, but I still feel add value, either to gameplay, programming knowledge, or both. For the inaugural Sidenote, we&amp;rsquo;ll be discussing adding a camera to our in progress roguelike. A camera will give us a couple of benefits, but the most immediate is that we can support maps larger than the terminal window.</description>
    </item>
    
    <item>
      <title>RoguelikeDev Builds A Roguelike, Part 3</title>
      <link>http://jeremyceri.se/post/roguelike-dev-week-1-part-2/</link>
      <pubDate>Sun, 02 Jul 2017 20:25:13 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-week-1-part-2/</guid>
      <description>Welcome back to my series following along with RoguelikeDev Builds a Roguelike! This is the second part of this weeks posts, the first being concerned with creating a player representation and moving it around using player input. In the second part of this week, we&amp;rsquo;re going to start thinking about the overall structure of our game, as well as get an intial version of the gameplay map, which is the world the player will be interacting with.</description>
    </item>
    
    <item>
      <title>RoguelikeDev Builds a Roguelike, Part 2</title>
      <link>http://jeremyceri.se/post/roguelike-dev-week-1-part-1/</link>
      <pubDate>Tue, 27 Jun 2017 22:33:11 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-week-1-part-1/</guid>
      <description>&lt;p&gt;Welcome back to my series following along with RoguelikeDev Builds a Roguelike! This is part 2, and this week, we&amp;rsquo;ve got things split into two parts. The first part, which this post will be concerned with, involves displaying the player and the screen, and implementing basic four direction movement. Part two will consist of creating a generic &amp;lsquo;Object&amp;rsquo; type that will represent things in the game, as well as creating an initial dungeon map.&lt;/p&gt;

&lt;p&gt;Lets dive right in creating our player, and getting it moving!
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RoguelikeDev Builds a Roguelike, Part 1</title>
      <link>http://jeremyceri.se/post/roguelike-dev-week-0/</link>
      <pubDate>Wed, 21 Jun 2017 23:54:35 -0600</pubDate>
      
      <guid>http://jeremyceri.se/post/roguelike-dev-week-0/</guid>
      <description>&lt;p&gt;So it begins! This is the first in a series of posts following my attempts at making a Roguelike, in Go, using BearLibTerminal. I&amp;rsquo;ll be following along with the &lt;code&gt;RoguelikeDev builds a Roguelike&lt;/code&gt; posts as I progress.&lt;/p&gt;

&lt;p&gt;So, without further ado, lets begin part 0: Setup!`&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>